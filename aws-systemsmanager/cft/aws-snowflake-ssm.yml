# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
#  - Provisions an SSM Automation Document to create a Snowflake Storage Integration
#  
#
# kmmahaj

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template to create Snowflake integration object for S3 access.
Parameters:
  SourceBucket:
    Description: REQUIRED. S3 Bucket that contains the Snowflake integration Lambda 
    Type: String
    Default: 's3-snowflakeintegration-AccountId-Region'
    MinLength: '1'
    MaxLength: '255'
  snowaccount:
    Description: REQUIRED. Snowflake Account Identifier
    Type: String
    AllowedPattern: .+
    ConstraintDescription: snowaccount is required
  snowuser:
    Description: REQUIRED. Snowflake account user
    Type: String
    NoEcho: true
    AllowedPattern: .+
    ConstraintDescription: snowuser is required
  snowpass:
    Description: REQUIRED. Snowflake password for the Snowflake account user
    Type: String
    NoEcho: true
    AllowedPattern: .+
    ConstraintDescription: snowpass is required
  snowdb:
    Description: REQUIRED. Snowflake Database
    Type: String
    Default: 'SF_TUTS'
    AllowedPattern: .+
    ConstraintDescription: snowdb is required
  snowschema:
    Description: REQUIRED. Snowflake Schema
    Type: String
    Default: 'PUBLIC'
    AllowedPattern: .+
    ConstraintDescription: snowschema is required

Resources:

#---------------------------------------------------------------------------------------------------
#  1- Secrets Manager to store Snowflake credentials
# --------------------------------------------------------------------------------------------------

# Secrets Management - Snowflake Credentials
  SnowflakeSecretString:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Credentials required for Snowflake
      Name: !Sub snowflakesecret-${AWS::Region}
      SecretString:
        Fn::Join:
        - ''
        - - '{"snowaccount":"'
          - Ref: snowaccount
          - '","snowuser": "'
          - Ref: snowuser
          - '","snowpass": "'
          - Ref: snowpass
          - '","snowdb": "'
          - Ref: snowdb
          - '","snowschema": "'
          - Ref: snowschema
          - '"}'

#---------------------------------------------------------------------------------------------------
#  2- Lambda Function that creates the Snowflake integration with S3
# --------------------------------------------------------------------------------------------------

#Lambda Function that creates the Snowflake integration with S3
  SnowflakeIntegrationLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join 
        - ''
        - - SnowflakeIntegration_
          - Lambda_
          - SSM
      Role: !GetAtt SnowflakeIntegrationLambdaRole.Arn
      Code:
        S3Bucket: !Ref SourceBucket
        S3Key: !Join 
          - ''
          - - SnowflakeIntegration_Lambda_SSM
            - /
            - SnowflakeIntegration_Lambda_SSM
            - .zip
      Description: SnowflakeIntegrationLambdaSSM
      Handler: SnowflakeIntegration_Lambda_SSM.lambda_handler
      MemorySize: '256'
      Runtime: python3.7
      Layers:
        - !Ref SnowflakeLayer
      Environment:
        Variables:
          SNOW_SECRET: !Ref SnowflakeSecretString
          AWSACCOUNT: !Ref 'AWS::AccountId'
      Timeout: 500

#Lambda Layer for Snowflake Python Connector
  SnowflakeLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
        - python3.8
      Content:
        S3Bucket: !Ref SourceBucket
        S3Key: snowflakelayer.zip
      Description: Lambda layer for Snowflake Python Connector
      LayerName: snowflakelayer
      LicenseInfo: MIT

#IAM Role for the SnowflakeIntegration Lambda
  SnowflakeIntegrationLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub snowflakeintegrationlamdarole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowLambdaAssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: SnowflakeIntegrationLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: '1'
                Action:
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersionTagging
                  - s3:GetObjectVersionAcl
                Effect: Allow
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${SourceBucket}
                  - !Sub arn:${AWS::Partition}:s3:::${SourceBucket}/*
              - Sid: '2'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Effect: Allow
                Resource: '*'
              - Sid: '3'
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:ListSecrets'
                Effect: Allow
                Resource: !Join [':',['arn:aws:secretsmanager', !Ref 'AWS::Region', !Ref 'AWS::AccountId','secret','snowflakesecret-*']]
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/IAMFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

#---------------------------------------------------------------------------------------------------
#  3- SSM Automation that invokes Lambda
# --------------------------------------------------------------------------------------------------

# SSM Automation Role
  SnowflakeSSMAutomationAssumeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub snowflake-automationassumerole-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - events.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"


  SSMPermissionToCallSnowflakeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - SnowflakeIntegrationLambda
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: !GetAtt SnowflakeSSMAutomationAssumeRole.Arn


# [Snowflake storage integration SSM]
  SnowflakeStorageIntegrationSSM:
    Type: AWS::SSM::Document
    DependsOn: SSMPermissionToCallSnowflakeLambda
    Properties:
      DocumentType: Automation
      Name: Custom-Snowflakestorageintegration
      Content:
        schemaVersion: '0.3'
        assumeRole: !GetAtt SnowflakeSSMAutomationAssumeRole.Arn
        parameters:
          S3BUCKET:
            type: String
            default: 'mybucket1'
          AutomationAssumeRole:
            type: String
            default: !GetAtt SnowflakeSSMAutomationAssumeRole.Arn        
        mainSteps:
          - name: createstorageintegration
            action: 'aws:invokeLambdaFunction'
            maxAttempts: 3
            timeoutSeconds: 180
            inputs:
              FunctionName: !GetAtt SnowflakeIntegrationLambda.Arn
              InvocationType: RequestResponse
              Payload: '{"parameterName":"S3BUCKET", "parameterValue":"{{S3BUCKET}}"}'

