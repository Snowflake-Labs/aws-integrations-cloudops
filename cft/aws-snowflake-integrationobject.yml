## TODO:
  # Validate path for S3 data location
  # Check that Snowflake account exists and it can connect with provided credentials 

AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  dataS3BucketName:
    Type: String
    Description: "Name of the S3 bucket in which data is stored"
    AllowedPattern: ".+"
  SnowflakeAssetsBucket:
    Type: String
    Description: "S3 bucket that contains Snowflake driver and assets"
    AllowedPattern: ".*"
    Default: "s3-snowflakeintegration-acountId-region"
  snowflakeAccount:
    Type: String
    Description: "Your Snowflake Account ID"
  snowflakeUsername:
    Type: String
    Description: "Snowflake Username"
  snowflakePassword:
    NoEcho: true  
    Type: String
    Description: "Snowflake Password"
  snowflakeRole:
    Type: String
    Description: "Snowflake Role that will be used to create Integrations"
    AllowedPattern: ".+"
    Default: "STORE_RL"
  snowflakeStorageIntegrationName:
    Type: String
    Description: "Name of the Storage Integration to be created"
    AllowedPattern: ".+"
    Default: "SINT" 
  SnowflakeSecretArn:
    Description: >-
      Enter ARN of the Secrets Manager Secret that contains Snowflake connection information
    Type: String
    Default: ''

Conditions:
  CreateNewSnowflakeSecret: !Equals 
    - !Ref SnowflakeSecretArn
    - ''
    
Resources:
  # Secrets Manager Secret for Snowflake credentials
  SnowflakeSecret:
    Type: AWS::SecretsManager::Secret
    Condition: CreateNewSnowflakeSecret
    Properties:
      Description: "Secret to store Snowflake credential"
      SecretString:
                Fn::Join:
                - ''
                - - '{"username": "'
                  - Ref: snowflakeUsername
                  - '","password": "'
                  - Ref: snowflakePassword
                  - '","accountid": "'
                  - Ref: snowflakeAccount
                  - '","snowflake_role": "'
                  - Ref: snowflakeRole
                  - '"}'
  # KMS Key
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Join
        - "-"
        - - "snowflake-store-key"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - :root
          Action: kms:*
          Resource: '*'
  # ExternalStage role
  SnowflakeExternalStageRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
      - "-"
      - - "Snowflake-Store-ExternalStage-Role"
        - !Select
          - 0
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref "AWS::StackId"
      Description: IAM Role used for Snowflake external stage
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join
          - "-"
          - - "Snowflake-Store-ExternalStage-S3-Policy"
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:DeleteObjectVersion"
                Resource: !Sub
                  - 'arn:aws:s3:::${dataS3BucketName}/*'
                  - { dataS3BucketName: !Ref dataS3BucketName }
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                  - 'arn:aws:s3:::${dataS3BucketName}'
                  - { dataS3BucketName: !Ref dataS3BucketName }
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                Resource: !Sub
                  - 'arn:aws:s3:::${SnowflakeAssetsBucket}/*'
                  - { SnowflakeAssetsBucket: !Ref SnowflakeAssetsBucket }

   # Lambda Layer
  CreateSnowflakeResourcesLambdaLayer:
    Type: AWS::Lambda::LayerVersion   
    Properties:
      CompatibleRuntimes:
        - python3.7
        - python3.8
      Content:
        S3Bucket: !Ref SnowflakeAssetsBucket
        S3Key: snowflakelayer.zip
      Description: 'Lambda layer for Snowflake Python Connector'
      LayerName: snowflakelayer
  # IAM Role and Policy for SF Resource Deployment Lambda 
  CreateSnowflakeResourcesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM Role used to create Snowflake resources from the CloudFormation template
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchLogsFullAccess'
      Policies:
        - PolicyName: kms-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:CreateGrant'
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey*"
                  - "kms:ReEncrypt*"
                Resource:
                  - !Join
                    - ":"
                    - - "arn"
                      - !Ref AWS::Partition
                      - "kms"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - "alias/aws/secretsmanager"
                  - !GetAtt KMSKey.Arn
        - PolicyName: secrets-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !If [CreateNewSnowflakeSecret, !Ref SnowflakeSecret, !Ref SnowflakeSecretArn]
        - PolicyName: update-iam-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:UpdateAssumeRolePolicy'
                Resource: !GetAtt SnowflakeExternalStageRole.Arn
  # Lambda def for creating the external stage
  CreateSnowflakeResourcesLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from botocore.exceptions import ClientError
          import requests

          import snowflake.connector

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"
          EMPTY_RESPONSE_DATA = {}

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)


          def get_secret_information(region_name, secret_name):
              logger.info("Getting secret information")
              try:
                  secretsmanager = boto3.client("secretsmanager")

                  return secretsmanager.get_secret_value(SecretId=secret_name)
              except ClientError as e:
                  if e.response["Error"]["Code"] == "ResourceNotFoundException":
                      logger.exception(
                          "The requested secret " + secret_name + " was not found"
                      )
                  else:
                      logger.exception(e)
                  raise e


          def connect_to_snowflake(get_secret_value_response):
              """Creates an instance of a Snowflake connection."""
              secret_string = get_secret_value_response["SecretString"]

              secret = json.loads(secret_string)
              snowflake_account = secret["accountid"]
              snowflake_password = secret["password"]
              snowflake_userName = secret["username"]
              snowflake_role_name = secret["snowflake_role"]

              # Connect to Snowflake
              logger.info("Connecting to Snowflake")
              snowflake_connection = snowflake.connector.connect(
                  user=snowflake_userName,
                  password=snowflake_password,
                  account=snowflake_account,
                  role=snowflake_role_name,
              )

              return snowflake_connection


          def create_storage_integration(
              snowflake_cursor, storage_integration_name, role_arn, s3_bucket_name
          ):
              """Creates a Snowflake storage integration."""
              logger.info("Creating Storage Integration")

              storage_integration_str = (
                  (
                      "create or replace storage integration \"%s\" \
              type = external_stage \
              storage_provider = s3 \
              enabled = true \
              storage_aws_role_arn = '%s' \
              storage_allowed_locations = ('s3://%s')"
                  )
                  % (storage_integration_name, role_arn, s3_bucket_name)
              )

              snowflake_cursor.execute(storage_integration_str)


          def get_storage_integration_info_for_policy(
              snowflake_cursor, storage_integration_name
          ):
              """Retrieves the IAM role ARN and External ID for the Snowflake role that will assume the IAM role created by Cloudformation."""
              logger.info("Describing Storage Integration")
              storage_user_arn = ""
              storage_external_id = ""

              snowflake_cursor.execute(
                  ('describe integration "%s"') % (storage_integration_name)
              )
              rows = snowflake_cursor.fetchall()
              for row in rows:
                  value = list(row)
                  if value[0] == "STORAGE_AWS_IAM_USER_ARN":
                      storage_user_arn = value[2]
                  if value[0] == "STORAGE_AWS_EXTERNAL_ID":
                      storage_external_id = value[2]
              return {
                  "storage_user_arn": storage_user_arn,
                  "storage_external_id": storage_external_id,
              }


          def create_policy_string(storage_integration_info):
              """Generate the Trust Policy to allow a Snowflake owned role to assume the IAM role."""
              policy_json = {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "AWS": [storage_integration_info["storage_user_arn"]]
                          },
                          "Action": "sts:AssumeRole",
                          "Condition": {
                              "StringEquals": {
                                  "sts:ExternalId": storage_integration_info[
                                      "storage_external_id"
                                  ]
                              }
                          },
                      },
                  ],
              }
              return json.dumps(policy_json)


          def sendResponse(event, context, responseStatus, responseData):
              responseBody = {
                  "Status": responseStatus,
                  "Reason": "See the details in CloudWatch Log Stream: "
                  + context.log_stream_name,
                  "PhysicalResourceId": context.log_stream_name,
                  "StackId": event["StackId"],
                  "RequestId": event["RequestId"],
                  "LogicalResourceId": event["LogicalResourceId"],
                  "Data": responseData,
              }
              req = requests.put(event["ResponseURL"], data=json.dumps(responseBody))
              if req.status_code != 200:
                  raise Exception(
                      "Received a non-200 HTTP response while sending response to CloudFormation."
                  )
              return


          def lambda_handler(event, context):
              """Entrypoint for the lambda."""
              # Get variables from os
              region_name = os.environ["Region"]
              role_arn = os.environ["RoleARN"]
              role_name = os.environ["RoleName"]
              s3_bucket_name = os.environ["S3BucketName"]
              storage_integration = os.environ["StorageIntegrationName"]
              secret_name = os.environ["SecretArn"]

              logger.info("role_arn: " + role_arn)
              logger.info("role_name: " + role_name)
              logger.info("s3_bucket_name: " + s3_bucket_name)
              logger.info("region_name: " + region_name)
              logger.info("secret_name: " + secret_name)

              # Initialize integration related variables
              storage_integration_info = {}

              # Delete
              if event["RequestType"] == "Delete":
                  sendResponse(event, context, SUCCESS, EMPTY_RESPONSE_DATA)
                  return

              # Get the information connection from Secrets Manager
              try:
                  get_secret_value_response = get_secret_information(
                      region_name, secret_name
                  )
              except:
                  sendResponse(event, context, FAILED, EMPTY_RESPONSE_DATA)
                  return

              # Decrypted secret using the associated KMS CMK
              # Ensure the Secret is in String mode
              if "SecretString" not in get_secret_value_response:
                  logger.error("The Secret is not in String mode")
                  sendResponse(event, context, FAILED, EMPTY_RESPONSE_DATA)
                  return

              # Create Snowflake resource
              try:
                  snowflake_connection = connect_to_snowflake(
                      get_secret_value_response
                  )
                  snowflake_cursor = snowflake_connection.cursor()

                  storage_integration_name = storage_integration + "_STORAGE_INTEGRATION"

                  # Create Snowflake Integrations
                  create_storage_integration(
                      snowflake_cursor,
                      storage_integration_name,
                      role_arn,
                      s3_bucket_name,
                  )

                  # Describe Snowflake integrations
                  storage_integration_info = get_storage_integration_info_for_policy(
                      snowflake_cursor, storage_integration_name
                  )
              except Exception as e:
                  logger.exception("Problem running SQL statements: " + str(e))
                  responseData = {
                      "Failed": "Unable to execute SQL statements in Snowflake"
                  }
                  sendResponse(event, context, FAILED, responseData)
                  return
              finally:
                  if "snowflake_cursor" in vars():
                      snowflake_cursor.close()
                  if "snowflake_connection" in vars():
                      snowflake_connection.close()

              # Update IAM role to add Snowflake information
              logger.info("Updating IAM Role")
              policy_str = create_policy_string(storage_integration_info)

              try:
                  iam = boto3.client("iam")
                  iam.update_assume_role_policy(
                      PolicyDocument=policy_str, RoleName=role_name
                  )
              except Exception as e:
                  logger.exception("Problem updating assume role policy: " + str(e))
                  logger.exception("Policy used: " + policy_str)
                  responseData = {
                      "Failed": "The assume role policy could not be updated"
                  }
                  sendResponse(event, context, FAILED, responseData)
                  return

              responseData = {"Success": "Snowflake resources created."}
              sendResponse(event, context, SUCCESS, responseData)
              logger.info("Success")
      Layers:
        - Ref: CreateSnowflakeResourcesLambdaLayer
      Handler: index.lambda_handler
      Role: !GetAtt CreateSnowflakeResourcesExecutionRole.Arn
      Runtime: python3.7
      Timeout: 600
      Environment:
        Variables:
          Region: !Sub "${AWS::Region}"
          RoleARN: !GetAtt SnowflakeExternalStageRole.Arn
          RoleName: !Ref SnowflakeExternalStageRole
          S3BucketName: !Ref dataS3BucketName
          StorageIntegrationName: !Ref snowflakeStorageIntegrationName
          SecretArn: !If [CreateNewSnowflakeSecret, !Ref SnowflakeSecret, !Ref SnowflakeSecretArn]
          StackName: !Sub "${AWS::StackName}"
  # Type: Custom - execute create storage integration update ExternalStage TrustPolicy
  SnowflakeResources:
    Type: Custom::SnowflakeResources
    Properties:
      ServiceToken: !Sub
        - "${lambdaArn}"
        - lambdaArn: !GetAtt CreateSnowflakeResourcesLambda.Arn

Outputs:
  DataS3BucketName:
    Value: !Ref dataS3BucketName
  SnowflakeStorageIntegrationName:
    Value: !Sub
      - "${snowflakeStorageIntegrationName}_STORAGE_INGRATION"
      - snowflakeStorageIntegrationName: !Ref snowflakeStorageIntegrationName
  SnowflakeAccountId:
    Value: !Ref snowflakeAccount
  SnowflakeStorageIntegrationRoleArn:
    Value: !GetAtt SnowflakeExternalStageRole.Arn
  SnowflakeSecret:
    Value: !If [CreateNewSnowflakeSecret, !Ref SnowflakeSecret, !Ref SnowflakeSecretArn]
  KMSKey:
    Value: !Ref KMSKey
